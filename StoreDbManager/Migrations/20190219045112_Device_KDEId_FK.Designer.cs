// <auto-generated />
using System;
using DbManager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DbManager.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20190219045112_Device_KDEId_FK")]
    partial class Device_KDEId_FK
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DbManager.CommentRegPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RegPointId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("RegPointId");

                    b.ToTable("CommentRegPoints");
                });

            modelBuilder.Entity("DbManager.CommentSubstation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SubstationId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("SubstationId");

                    b.ToTable("CommentSubstations");
                });

            modelBuilder.Entity("DbManager.Consumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractNumber");

                    b.Property<string>("Name");

                    b.Property<string>("O_Build");

                    b.Property<string>("O_Flat");

                    b.Property<string>("O_House");

                    b.Property<string>("O_Index");

                    b.Property<string>("O_Local");

                    b.Property<string>("O_Street");

                    b.Property<string>("U_Build");

                    b.Property<string>("U_Flat");

                    b.Property<string>("U_House");

                    b.Property<string>("U_Index");

                    b.Property<string>("U_Local");

                    b.Property<string>("U_Street");

                    b.HasKey("Id");

                    b.ToTable("Consumers");
                });

            modelBuilder.Entity("DbManager.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("DbManager.DeliveryAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContractId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("DeliveryStateId");

                    b.Property<int>("DeliveryTypeId");

                    b.Property<string>("SetName");

                    b.Property<int>("UserId");

                    b.Property<int?>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("DeliveryStateId");

                    b.HasIndex("DeliveryTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkerId");

                    b.ToTable("DeliveryActs");
                });

            modelBuilder.Entity("DbManager.DeliveryState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DeliveryStates");
                });

            modelBuilder.Entity("DbManager.DeliveryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DeliveryTypes");
                });

            modelBuilder.Entity("DbManager.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractId");

                    b.Property<string>("CurrentState");

                    b.Property<int>("DeviceTypeId");

                    b.Property<int?>("KDEId");

                    b.Property<string>("SerialNumber")
                        .IsRequired();

                    b.Property<int?>("SetId");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("KDEId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("DbManager.DeviceDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("DeliveryActId");

                    b.Property<int?>("DeviceId");

                    b.Property<int?>("DeviceTypeId");

                    b.Property<string>("SerialNumber");

                    b.Property<int?>("SetId");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryActId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("DeviceDeliveries");
                });

            modelBuilder.Entity("DbManager.DeviceState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("DeviceId");

                    b.Property<int>("DeviceStateTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("DeviceStateTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("DeviceStates");
                });

            modelBuilder.Entity("DbManager.DeviceStateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("DeviceStateTypes");
                });

            modelBuilder.Entity("DbManager.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccuracyClass")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("EnergyType")
                        .HasMaxLength(10);

                    b.Property<string>("INom")
                        .HasMaxLength(10);

                    b.Property<string>("ModelCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<double>("Price");

                    b.Property<int>("TestInterval");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UNom")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("DeviceTypes");
                });

            modelBuilder.Entity("DbManager.EmploymentContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Number");

                    b.Property<int>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("EmploymentContracts");
                });

            modelBuilder.Entity("DbManager.InstallAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InstallActTypeId");

                    b.Property<int>("RegPointId");

                    b.Property<string>("Seal_AV1");

                    b.Property<string>("Seal_AV2");

                    b.Property<string>("Seal_KDE");

                    b.Property<string>("Seal_KI");

                    b.Property<string>("Seal_RegDevice");

                    b.Property<string>("Seal_TT_A");

                    b.Property<string>("Seal_TT_B");

                    b.Property<string>("Seal_TT_C");

                    b.Property<int>("T1");

                    b.Property<int>("T2");

                    b.Property<string>("TT_A_Serial");

                    b.Property<string>("TT_B_Serial");

                    b.Property<string>("TT_C_Serial");

                    b.Property<string>("TT_Koefficient");

                    b.Property<int>("Tsum");

                    b.Property<string>("Uninstalled_Ktt");

                    b.Property<string>("Uninstalled_Serial");

                    b.Property<string>("Uninstalled_TSum");

                    b.HasKey("Id");

                    b.HasIndex("InstallActTypeId");

                    b.HasIndex("RegPointId");

                    b.ToTable("InstallActs");
                });

            modelBuilder.Entity("DbManager.InstallActType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("InstallActTypes");
                });

            modelBuilder.Entity("DbManager.KDE", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KDETypeId");

                    b.Property<int?>("PowerLineSupportId");

                    b.HasKey("Id");

                    b.HasIndex("KDETypeId");

                    b.HasIndex("PowerLineSupportId");

                    b.ToTable("KDEs");
                });

            modelBuilder.Entity("DbManager.KDEType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("KDETypes");
                });

            modelBuilder.Entity("DbManager.Letter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLetter");

                    b.Property<DateTime>("HandingDate");

                    b.Property<DateTime>("InviteDate");

                    b.Property<DateTime>("NotifyDate");

                    b.Property<int?>("NumOfReestr");

                    b.Property<string>("OutNumber");

                    b.Property<bool>("Printed");

                    b.Property<int>("RegPointId");

                    b.HasKey("Id");

                    b.HasIndex("RegPointId");

                    b.ToTable("Letters");
                });

            modelBuilder.Entity("DbManager.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceId");

                    b.Property<string>("LinkType");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("DbManager.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContractId");

                    b.Property<int>("MaterialTypeId");

                    b.Property<double>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("MaterialTypeId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("DbManager.MaterialDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliveryActId");

                    b.Property<int?>("MaterialId");

                    b.Property<int>("MaterialTypeId");

                    b.Property<string>("Other");

                    b.Property<double>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryActId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("MaterialTypeId");

                    b.ToTable("MaterialDeliveries");
                });

            modelBuilder.Entity("DbManager.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaterialUnitId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.HasIndex("MaterialUnitId");

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("DbManager.MaterialUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("MaterialUnits");
                });

            modelBuilder.Entity("DbManager.MounterReportUgesAL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brigade");

                    b.Property<int>("ContractId");

                    b.Property<int?>("CuratorId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Fider");

                    b.Property<string>("Local");

                    b.Property<int>("NetRegionId");

                    b.Property<int>("ReportStateId");

                    b.Property<string>("Substation");

                    b.Property<string>("WorkPermit");

                    b.Property<int>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("NetRegionId");

                    b.HasIndex("ReportStateId");

                    b.HasIndex("WorkerId");

                    b.ToTable("MounterReportUgesALs");
                });

            modelBuilder.Entity("DbManager.MounterReportUgesDeviceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Building");

                    b.Property<int>("DeviceId");

                    b.Property<string>("DeviceSeal");

                    b.Property<string>("Flat");

                    b.Property<string>("House");

                    b.Property<string>("InstallPlace");

                    b.Property<int?>("KDEId");

                    b.Property<string>("KDESeal");

                    b.Property<string>("KDEType");

                    b.Property<string>("PowerLineType");

                    b.Property<string>("Serial");

                    b.Property<string>("Street");

                    b.Property<double>("Sum");

                    b.Property<string>("SwitchSeal");

                    b.Property<double>("T1");

                    b.Property<double>("T2");

                    b.Property<double>("U1");

                    b.Property<double>("U2");

                    b.Property<double>("U3");

                    b.Property<double>("WireConsumptionNewInput");

                    b.Property<double>("WireConsumptionUpDown");

                    b.Property<int>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("KDEId");

                    b.HasIndex("WorkerId");

                    b.ToTable("MounterReportUgesALItems");
                });

            modelBuilder.Entity("DbManager.NetRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChiefName");

                    b.Property<string>("ContactName");

                    b.Property<int>("ContractId");

                    b.Property<string>("District");

                    b.Property<string>("FullName");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("NetRegions");
                });

            modelBuilder.Entity("DbManager.PPE", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("Volume");

                    b.HasKey("Id");

                    b.ToTable("PPEs");
                });

            modelBuilder.Entity("DbManager.PPEDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliveryActId");

                    b.Property<int?>("PPEId");

                    b.Property<int>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryActId");

                    b.HasIndex("PPEId")
                        .IsUnique()
                        .HasFilter("[PPEId] IS NOT NULL");

                    b.ToTable("PPEDeliveries");
                });

            modelBuilder.Entity("DbManager.PowerLineSupport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FixatorsCount");

                    b.Property<int>("MounterReportUgesALId");

                    b.Property<string>("PowerLineType");

                    b.Property<int>("SupportNumber");

                    b.HasKey("Id");

                    b.HasIndex("MounterReportUgesALId");

                    b.ToTable("PowerLineSupports");
                });

            modelBuilder.Entity("DbManager.RegPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CommReg");

                    b.Property<int>("ConsumerId");

                    b.Property<int?>("DeviceId");

                    b.Property<string>("Direction");

                    b.Property<string>("Feeder");

                    b.Property<string>("InstallPlace");

                    b.Property<string>("Line");

                    b.Property<string>("PS");

                    b.Property<int>("RegPointFlagsId");

                    b.Property<string>("Section");

                    b.Property<int>("SubstationId");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SubstationId");

                    b.ToTable("RegPoints");
                });

            modelBuilder.Entity("DbManager.RegPointFlags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accept");

                    b.Property<bool>("Accepted");

                    b.Property<bool>("ExsistRegDevice");

                    b.Property<bool>("Import");

                    b.Property<bool>("Notification");

                    b.Property<bool>("Printed");

                    b.Property<int>("RegPointId");

                    b.Property<bool>("ReportedByMounter");

                    b.Property<bool>("Sent");

                    b.Property<bool>("SentActAccount");

                    b.Property<bool>("SentPaper");

                    b.HasKey("Id");

                    b.HasIndex("RegPointId")
                        .IsUnique();

                    b.ToTable("RegPointFlags");
                });

            modelBuilder.Entity("DbManager.ReportRemark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReportId");

                    b.Property<int>("ReportTypeId");

                    b.Property<string>("Text");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReportTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ReportRemarks");
                });

            modelBuilder.Entity("DbManager.ReportState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("ReportStates");
                });

            modelBuilder.Entity("DbManager.ReportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("ReportTypes");
                });

            modelBuilder.Entity("DbManager.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DbManager.SBReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brigade1");

                    b.Property<string>("Brigade2");

                    b.Property<int>("ContractId");

                    b.Property<int?>("CuratorId");

                    b.Property<DateTime>("Date1");

                    b.Property<DateTime>("Date2");

                    b.Property<string>("MeterBoard");

                    b.Property<int>("NetRegionId");

                    b.Property<string>("Phase1");

                    b.Property<string>("Phase2");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("ReportStateId");

                    b.Property<string>("Substation");

                    b.Property<string>("WorkPermit1");

                    b.Property<string>("WorkPermit2");

                    b.Property<int>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("NetRegionId");

                    b.HasIndex("ReportStateId");

                    b.HasIndex("WorkerId");

                    b.ToTable("SBReports");
                });

            modelBuilder.Entity("DbManager.Substation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdd");

                    b.Property<string>("Name");

                    b.Property<int>("NetRegionId");

                    b.Property<int>("SubstationStateId");

                    b.HasKey("Id");

                    b.HasIndex("NetRegionId");

                    b.HasIndex("SubstationStateId");

                    b.ToTable("Substations");
                });

            modelBuilder.Entity("DbManager.SubstationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SubstationStates");
                });

            modelBuilder.Entity("DbManager.Switch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeviceSeal");

                    b.Property<string>("DeviceSerial");

                    b.Property<int>("SBReportId");

                    b.Property<double>("Sum");

                    b.Property<string>("SwitchNumber");

                    b.Property<double>("T1");

                    b.Property<double>("T2");

                    b.Property<string>("TTANumber");

                    b.Property<string>("TTASeal");

                    b.Property<int>("TTAk");

                    b.Property<string>("TTBNumber");

                    b.Property<string>("TTBSeal");

                    b.Property<int>("TTBk");

                    b.Property<string>("TTCNumber");

                    b.Property<string>("TTCSeal");

                    b.Property<int>("TTCk");

                    b.Property<string>("TestBoxSeal");

                    b.HasKey("Id");

                    b.HasIndex("SBReportId");

                    b.ToTable("Switches");
                });

            modelBuilder.Entity("DbManager.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int?>("RoleId");

                    b.Property<int?>("WorkerID");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DbManager.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeliveryAvailible");

                    b.Property<string>("MIddlename")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<string>("Surname")
                        .HasMaxLength(50);

                    b.Property<int>("WorkerTypeId");

                    b.HasKey("Id");

                    b.HasIndex("WorkerTypeId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("DbManager.WorkerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("WorkerTypes");
                });

            modelBuilder.Entity("DbManager.CommentRegPoint", b =>
                {
                    b.HasOne("DbManager.RegPoint", "RegPoint")
                        .WithMany("Comments")
                        .HasForeignKey("RegPointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.CommentSubstation", b =>
                {
                    b.HasOne("DbManager.Substation", "Substation")
                        .WithMany("Comments")
                        .HasForeignKey("SubstationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.DeliveryAct", b =>
                {
                    b.HasOne("DbManager.Contract", "Contract")
                        .WithMany("DeliveryActs")
                        .HasForeignKey("ContractId");

                    b.HasOne("DbManager.DeliveryState", "DeliveryState")
                        .WithMany("DeliveryActs")
                        .HasForeignKey("DeliveryStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.DeliveryType", "DeliveryType")
                        .WithMany("DeliveryActs")
                        .HasForeignKey("DeliveryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.Worker", "Worker")
                        .WithMany("DeliveryActs")
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("DbManager.Device", b =>
                {
                    b.HasOne("DbManager.Contract", "Contract")
                        .WithMany("Devices")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.DeviceType", "DeviceType")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.KDE", "KDE")
                        .WithMany("Devices")
                        .HasForeignKey("KDEId");
                });

            modelBuilder.Entity("DbManager.DeviceDelivery", b =>
                {
                    b.HasOne("DbManager.DeliveryAct", "DeliveryAct")
                        .WithMany("DeviceDeliveries")
                        .HasForeignKey("DeliveryActId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.Device", "Device")
                        .WithMany("DeviceDeliveries")
                        .HasForeignKey("DeviceId");

                    b.HasOne("DbManager.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId");
                });

            modelBuilder.Entity("DbManager.DeviceState", b =>
                {
                    b.HasOne("DbManager.Device", "Device")
                        .WithMany("DeviceStates")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.DeviceStateType", "DeviceStateType")
                        .WithMany()
                        .HasForeignKey("DeviceStateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.EmploymentContract", b =>
                {
                    b.HasOne("DbManager.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.InstallAct", b =>
                {
                    b.HasOne("DbManager.InstallActType", "InstallActType")
                        .WithMany()
                        .HasForeignKey("InstallActTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.RegPoint", "RegPoint")
                        .WithMany("InstallActs")
                        .HasForeignKey("RegPointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.KDE", b =>
                {
                    b.HasOne("DbManager.KDEType", "KDEType")
                        .WithMany()
                        .HasForeignKey("KDETypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.PowerLineSupport", "PowerLineSupport")
                        .WithMany("KDEs")
                        .HasForeignKey("PowerLineSupportId");
                });

            modelBuilder.Entity("DbManager.Letter", b =>
                {
                    b.HasOne("DbManager.RegPoint", "RegPoint")
                        .WithMany("Letters")
                        .HasForeignKey("RegPointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.Link", b =>
                {
                    b.HasOne("DbManager.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.Material", b =>
                {
                    b.HasOne("DbManager.Contract", "Contract")
                        .WithMany("Materials")
                        .HasForeignKey("ContractId");

                    b.HasOne("DbManager.MaterialType", "MaterialType")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.MaterialDelivery", b =>
                {
                    b.HasOne("DbManager.DeliveryAct", "DeliveryAct")
                        .WithMany("MaterialDeliveries")
                        .HasForeignKey("DeliveryActId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.Material", "Material")
                        .WithMany("MaterialDeliveries")
                        .HasForeignKey("MaterialId");

                    b.HasOne("DbManager.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.MaterialType", b =>
                {
                    b.HasOne("DbManager.MaterialUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("MaterialUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.MounterReportUgesAL", b =>
                {
                    b.HasOne("DbManager.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.NetRegion", "NetRegion")
                        .WithMany()
                        .HasForeignKey("NetRegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.ReportState", "ReportState")
                        .WithMany()
                        .HasForeignKey("ReportStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.MounterReportUgesDeviceItem", b =>
                {
                    b.HasOne("DbManager.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.KDE", "KDE")
                        .WithMany("MounterReportUgesDeviceItems")
                        .HasForeignKey("KDEId");

                    b.HasOne("DbManager.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.NetRegion", b =>
                {
                    b.HasOne("DbManager.Contract", "Contract")
                        .WithMany("NetRegions")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.PPEDelivery", b =>
                {
                    b.HasOne("DbManager.DeliveryAct", "DeliveryAct")
                        .WithMany("PPEDeliveries")
                        .HasForeignKey("DeliveryActId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.PPE", "PPE")
                        .WithOne("PEDeliveries")
                        .HasForeignKey("DbManager.PPEDelivery", "PPEId");
                });

            modelBuilder.Entity("DbManager.PowerLineSupport", b =>
                {
                    b.HasOne("DbManager.MounterReportUgesAL", "MounterReportUgesAL")
                        .WithMany("PowerLineSupports")
                        .HasForeignKey("MounterReportUgesALId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.RegPoint", b =>
                {
                    b.HasOne("DbManager.Consumer", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId");

                    b.HasOne("DbManager.Substation", "Substation")
                        .WithMany("RegPoints")
                        .HasForeignKey("SubstationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.RegPointFlags", b =>
                {
                    b.HasOne("DbManager.RegPoint", "RegPoint")
                        .WithOne("RegPointFlags")
                        .HasForeignKey("DbManager.RegPointFlags", "RegPointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.ReportRemark", b =>
                {
                    b.HasOne("DbManager.ReportType", "ReportType")
                        .WithMany()
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.SBReport", b =>
                {
                    b.HasOne("DbManager.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.NetRegion", "NetRegion")
                        .WithMany()
                        .HasForeignKey("NetRegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.ReportState", "ReportState")
                        .WithMany()
                        .HasForeignKey("ReportStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.Substation", b =>
                {
                    b.HasOne("DbManager.NetRegion", "NetRegion")
                        .WithMany("Substations")
                        .HasForeignKey("NetRegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DbManager.SubstationState", "SubstationState")
                        .WithMany("Substation")
                        .HasForeignKey("SubstationStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.Switch", b =>
                {
                    b.HasOne("DbManager.SBReport", "SBReport")
                        .WithMany("Switches")
                        .HasForeignKey("SBReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbManager.User", b =>
                {
                    b.HasOne("DbManager.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("DbManager.Worker", b =>
                {
                    b.HasOne("DbManager.WorkerType", "WorkerType")
                        .WithMany("Workers")
                        .HasForeignKey("WorkerTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
